@uniform shadow_tr "shadow tr"
@uniform shadow_cascades "shadow cascades"
@sampler shadow_map "shadow"

@all
varying float shadow_view_z;
varying vec4 shadow_tc[4];

@vertex
uniform mat4 shadow_tr[4];

void shadow(vec4 wpos)
{
    for (int i = 0; i < 4; ++i)
        shadow_tc[i] = shadow_tr[i] * wpos;
    shadow_view_z = wpos.z;
}

@fragment
uniform sampler2D shadow_map;
uniform vec4 shadow_cascades;

float shadow(float ndl01)
{
    if (ndl01 < 0.001)
        return 0.0;

    vec3 d3 = step(shadow_cascades.xyz, vec3(shadow_view_z));
    float d = d3.x + d3.y + d3.z;
    int i = int(d);

    // note there is no need to divide by w for othogonal light sources
    vec2 shad_xy = shadow_tc[i].xy;
    float shad_z = shadow_tc[i].z;

    float shadow = 1.0 - step(texture(shadow_map, shad_xy).x, shad_z) * 0.25;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( -1, -1)).x, shad_z) * 0.0625;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( -1, 0)).x, shad_z) * 0.125;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( -1, 1)).x, shad_z) * 0.0625;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( 0, -1)).x, shad_z) * 0.125;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( 0, 1)).x, shad_z) * 0.125;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( 1, -1)).x, shad_z) * 0.0625;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( 1, 0)).x, shad_z) * 0.125;
    shadow -= step(textureOffset(shadow_map, shad_xy, ivec2( 1, 1)).x, shad_z) * 0.0625;
    return shadow;
}
